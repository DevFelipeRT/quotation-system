<?php

declare(strict_types=1);

namespace App\Infrastructure\Database\Execution;

/**
 * Defines a contract for performing database operations in a decoupled, infrastructure-oriented way.
 *
 * Intended for use by repositories or service layers that require structured access to a relational database.
 * Implementations must abstract low-level connection details (e.g. PDO).
 */
interface DatabaseRequestInterface
{
    /**
     * Executes a SELECT statement and returns results as associative arrays.
     *
     * @param string $sql    SQL query with placeholders.
     * @param array  $params Parameters to bind to the query.
     * @return array         Result set as array of rows.
     */
    public function select(string $sql, array $params = []): array;

    /**
     * Executes a DML statement (INSERT, UPDATE, DELETE).
     *
     * @param string $sql    SQL statement with placeholders.
     * @param array  $params Parameters to bind.
     * @return int           Number of affected rows.
     */
    public function execute(string $sql, array $params = []): int;

    /**
     * Checks whether a query yields any results.
     *
     * @param string $sql    SQL SELECT query.
     * @param array  $params Parameters to bind.
     * @return bool          True if at least one result exists.
     */
    public function exists(string $sql, array $params = []): bool;

    /**
     * Begins a transactional context.
     */
    public function beginTransaction(): void;

    /**
     * Commits the current transaction.
     */
    public function commit(): void;

    /**
     * Rolls back the active transaction.
     */
    public function rollback(): void;

    /**
     * Returns the ID generated by the last INSERT operation.
     *
     * @return int
     */
    public function lastInsertId(): int;
}
